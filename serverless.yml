service: sls-academy-2-shortlinker
app: sls-academy-2-shortlinker
frameworkVersion: "3"

useDotenv: true

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-iam-roles-per-function

package:
  individually: true

custom:
  serverless-offline:
    httpPort: 3000
  esbuild:
    bundle: true
    minify: false
    target: "node18"
    platform: "node"
    concurrency: 10

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1
  httpApi:
    authorizers:
      verify-token:
        type: request
        functionName: verify-token
  environment:
    ACCOUNT_ID: ${env:ACCOUNT_ID}
    LINKS_TABLE: links
    USERS_TABLE: users
    TOKENS_TABLE: tokens

functions:
  verify-token:
    handler: app/functions/auth/verify.handler

  app:
    handler: app/functions/app/app.handler
    events:
      - http:
          method: get
          path: /
          cors: true

  showme:
    handler: app/functions/app/me.handler
    events:
      - http:
          method: GET
          path: /me
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 60
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:*"
        Resource:
          - !GetAtt LinksTable.Arn

  sendemail:
    handler: app/functions/app/sendEmail.handler
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:ShortlinkerQueue
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:*"
          - "lambda:InvokeFunction"
          - "ses:*"
        Resource: "*"

  signup:
    handler: app/functions/auth/authorize.handler
    events:
      - http:
          method: post
          path: auth/sign-up
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:*"
        Resource:
          - !GetAtt UsersTable.Arn
          - !GetAtt TokensTable.Arn

  singin:
    handler: app/functions/auth/login.handler
    events:
      - http:
          method: post
          path: auth/sign-in
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:*"
        Resource:
          - !GetAtt UsersTable.Arn
          - !GetAtt TokensTable.Arn

  createlink:
    handler: app/functions/link/createLink.handler
    events:
      - http:
          method: post
          path: link/link
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 60
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:*"
          - "sqs:SendMessage"
          - "events:PutEvents"
          - "lambda:InvokeFunction"
          - "iam:PassRole"
          - "scheduler:CreateSchedule"
        Resource: "*"

  redirectlink:
    handler: app/functions/link/redirectLink.handler
    events:
      - http:
          method: get
          path: /{shortlink}
          cors: true
    environment:
      LINKS_TABLE: links
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:*"
        Resource:
          - !GetAtt LinksTable.Arn

  deactivatelink:
    handler: app/functions/link/deactivateLink.handler
    events:
      - http:
          method: delete
          path: link/link
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 60
    environment:
      USERS_TABLE: users
      LINKS_TABLE: links
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:*"
          - "sqs:SendMessage"
        Resource: "*"

  scheduleddeactivate:
    handler: app/functions/link/scheduledDeactivateLink.handler
    events:
      - eventBridge:
          eventBus: default
          pattern:
            source:
              - "deactivator"
            detail-type:
              - "scheduled-deactivator"
    environment:
      LINKS_TABLE: links
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:*"
          - "sqs:SendMessage"
        Resource: "*"

resources:
  Resources:
    EventBridgerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: event-bridger-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
                  - scheduler.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: LambdaInvokeAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"

    ShortlinkerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ShortlinkerQueue

    ShortUrlEvent:
      Type: AWS::Events::Rule
      Properties:
        EventPattern:
          source:
            - "deactivator"
          detail-type:
            - "scheduled-deactivator"
        Targets:
          - Arn: arn:aws:lambda:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:function:scheduleddeactivate
            Id: "DeactivateTarget"

    LinksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: links
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: emailAndLinksId
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: password
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: emailAndPassword
            KeySchema:
              - AttributeName: email
                KeyType: HASH
              - AttributeName: password
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10

    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tokens
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: access_token
            AttributeType: S
          - AttributeName: refresh_token
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: accessAndRefreshTokens
            KeySchema:
              - AttributeName: access_token
                KeyType: HASH
              - AttributeName: refresh_token
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
